import streamlit as st
import nltk

from request_service import get_sentiment_vader, get_sentiment_gpt, generate_response

nltk.download('vader_lexicon')

role_help = 'User: This role is used to indicate that the text is spoken by the primary speaker in the conversation, ' \
            'typically a human user. When you send text with the user role, the OpenAI API will generate a ' \
            'response as if it were speaking to a human, taking into account the language, tone, and style ' \
            'appropriate for a human-to-human conversation. ' \
            '\n\nAssistant: This role is used to indicate that the text is spoken by an AI assistant or chatbot. ' \
            'When you send text with the assistant role, the OpenAI API will generate a response that is appropriate' \
            ' for an AI-to-human conversation. This might include a more formal or technical tone, or a more concise ' \
            'response that includes only the most relevant information.' \
            '\n\nSystem: This role is used to indicate that the text is generated by a system or automated process,' \
            ' rather than a human or AI agent. When you send text with the system role, the OpenAI API will generate' \
            ' a response that is appropriate for a machine-to-machine conversation. This might include more technical' \
            ' language, or a response that is optimized for a particular use case or system integration.'


def main():
    st.set_page_config(page_title='Chat GPT UI')
    st.header('A simple Chat GPT (3.5) UI (with sentiment analysis)')

    role = st.selectbox('Enter the role ChatGPT should have:', ('User', 'System', 'Assistant'), help=role_help)
    question = st.text_input('Enter your question:')

    if question and role:
        st.subheader('Answer:')
        answer = generate_response(question, role.lower())
        st.write(answer)

        st.subheader('Answer Sentiment Analysis (by ChatGPT):')
        answer_sentiment_gpt = get_sentiment_gpt(answer, role.lower())
        st.write(answer_sentiment_gpt)

        st.subheader('Answer Sentiment Analysis (by VADER):')
        answer_sentiment_vader = get_sentiment_vader(answer)
        st.write(answer_sentiment_vader)


if __name__ == "__main__":
    main()
